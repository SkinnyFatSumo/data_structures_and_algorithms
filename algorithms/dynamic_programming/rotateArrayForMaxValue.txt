LEETCODE 396  (rotate-function)

Input Array:
array = [3, 4, 2, 1, 2]

Sum of Elements in Array:
sum_A  = 3   + 4   + 2   + 1   + 2   =  12
sum_A  = 3*1 + 4*1 + 2*1 + 1*1 + 2*1 =  12 <--- seems obvious, but keep it in mind

Length of Array:
len_A = 5

establish first pass given our rotate function:

3        4        2        1         2
--------------------------------------------
    
3 * 0  | 4 * 1  | 2 * 2  | 1 * 3  | 2 * 4   = 19

Now the fun part:

3 * 0  | 4 * 1  | 2 * 2  | 1 * 3  | 2 * 4 
   +1  |    +1  |    +1  |    +1  |    +1  <--- Add sum of elements in array (+ sum_A)
       |        |        |        |    -5_    
  ___  |   ___  |   ___  |   ___  |   ___ \     It's the same thing we did earlier: 
       |        |        |        |        \    sum_A = 3*1 + 4*1 + 2*1 + 1*1 + 2*1 = 12 
3 * 1  | 4 * 2  | 2 * 3  | 1 * 4  | 2 * 0   \ 
       |        |        |        |          \_ -5 == -len_A
       |        |        |        |             This is equivalent to rotating the indexes.
       |        |        |        |             All increase by one, except last goes to 0.
       |        |        |        |                      
       |        |        |        |          when done manually 3+8+6+4+0 = 21
       |        |        |        |          
       |        |        |        |          but with our forumla: 
       |        |        |        |             previous     array     (value at now zeroed 
       |        |        |        |           product sum  +  sum   +     index * -len_A)
       |        |        |        |           -----------    -----      -------------------
       |        |        |        |               19       +  12    +     (2 * -5) = -10
       |        |        |        |          
       |        |        |        |               19 + 12 - 10 = 21
_______|________|________|________|________________
3 * 1  | 4 * 2  | 2 * 3  | 1 * 4  | 2 * 0   
   +1  |    +1  |    +1  |    +1  |    +1    
       |        |        |    -5  |          
  ___  |   ___  |   ___  |   ___  |   ___ 
       |        |        |        |          
3 * 2  | 4 * 3  | 2 * 4  | 1 * 0  | 2 * 1    manually: 6 + 12 + 8 + 0 + 2 = 28
       |        |        |        |          
       |        |        |        |          formula:  21 + 12 + (1 * -5) = 28
       |        |        |        |          
_______|________|________|________|________________
3 * 2  | 4 * 3  | 2 * 4  | 1 * 0  | 2 * 1   
   +1  |    +1  |    +1  |    +1  |    +1    
       |        |    -5  |        |          
  ___  |   ___  |   ___  |   ___  |   ___ 
       |        |        |        |          
3 * 3  | 4 * 4  | 2 * 0  | 1 * 1  | 2 * 2    manually: 9 + 16 + 0 + 1 + 4 = 30 
       |        |        |        |          
       |        |        |        |          formula:  28 + 12 + (2 * -5) = 30 
_______|________|________|________|________________

We can solve the value at each new rotation simply by knowing the value at
it's previous location.
  - We have to iterate through array once to get sum and product sum -> O n
  - We have to iterate once more to calculate from previous sums -----> O n





